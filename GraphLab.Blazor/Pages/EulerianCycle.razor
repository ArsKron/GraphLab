@page "/EulerianCycle"
@using System.Threading
@using GraphLab.Core
@using GraphLab.Core.Algorithms
@using GraphLab.Core.Algorithms.Search
@using GraphLab.Core.Algorithms.Utils

<div id="graph" style="height:80vh"></div>

<button @onclick="SearchCycle">Поиск Эйлерова цикла</button>

@code {

    [Inject]
    public ModelService ModelService { get; set; }

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ModelService.GenerateEulerianFraph();
            await JSRuntime.BindGraph(ModelService.Graph, false);
        }

        if (CyclePainted)
        {
            for (int i = 0; i < Cycle.Count - 1; i++)
            {
                Road StartingFrom = AllEdges.Find(x => x.From == Cycle[i] && x.To == Cycle[i + 1]);
                StartingFrom.Price = i + 1;
                Road StartingTo = AllEdges.Find(x => x.From == Cycle[i + 1] && x.To == Cycle[i]);
                StartingTo.Price = i + 1;
                await JSRuntime.PainEulerianCycle(StartingFrom, StartingTo);
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public List<City> Cycle { get; set; }
    public List<Road> AllEdges { get; set; }
    public bool CyclePainted { get; set; }


    protected void SearchCycle()
    {
        EulerianCycle<City, Road> EulerianCycle_ = new EulerianCycle<City, Road>(ModelService.Graph);
        Cycle = EulerianCycle_.Begin();
        foreach (var edge in ModelService.Graph.Edges)
        {
            AllEdges.Add(edge);
        }
        CyclePainted = true;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        AllEdges = new();
        CyclePainted = false;
        await base.OnInitializedAsync();
    }
}
